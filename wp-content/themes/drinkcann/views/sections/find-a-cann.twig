{% set color = section.text_color|trim('#', 'left')|upper %}


<div class='pt-12 pb-24 lg:pt-32 lg:pb-[200px] relative' data-section='highlights'
     style='color: {{ section.text_color }}; background-color: {{ section.background_color }}'
     data-id='{{ section.acf_fc_layout }}-{{ loop.index0 }}'>

    <div class='absolute top-px left-0 right-0 transform -translate-y-full'>
        <svg class='w-full' viewBox="0 0 1440 92" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M719 24.7418C912.5 61.8206 1233 107.519 1440 8.14117V92H0V47.0174C173.5 -12.9909 538 -9.94165 719 24.7418Z"
                  fill="{{ section.background_color }}"/>
        </svg>
    </div>

    <div class='overflow-hidden absolute inset-0 w-full h-full'>

        <div class='absolute right-100px top-60px w-16 lg:block hidden'>
            {% include 'snippets/circle.twig' %}
        </div>

        <div class='absolute -left-50px top-100px w-48 lg:block hidden'>
            {% include 'snippets/circle.twig' %}
        </div>

        <div class='absolute left-100px top-350px w-8 lg:block hidden'>
            {% include 'snippets/circle.twig' %}
        </div>

        <div class='absolute lg:-left-25px bottom-200px w-16 lg:block hidden'>
            {% include 'snippets/circle.twig' %}
        </div>

        <div class='absolute lg:-right-100px bottom-300px w-40 lg:block hidden'>
            {% include 'snippets/circle.twig' %}
        </div>
    </div>

    <div class='relative z-20 md:pt-24'>

        <div class='container mx-auto px-4'>

            <div class='w-full lg:w-3/4 mx-auto text-center  lg:mb-6 mb-6 has-underline'>

                <div class="mb-12 sm:-my-px sm:ml-6 sm:flex sm:space-x-8 justify-center">

                    <input type="hidden" id="type" value="2">

                    <a id="getpickup"
                       class=" cursor-pointer h4 border-transparent text-purple   inline-flex items-center px-1 pt-1 border-b-2 text-xl font-medium  hover:opacity-100"
                       x-state-description="undefined: &quot;border-indigo-500 text-gray-900&quot;, undefined: &quot;border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700&quot;">
                        {% if post.link ends with 'find-a-cann-ca/' %}
                            In Store
                        {% else %}
                            Buy Pickup
                        {% endif %}
                    </a>


                    <a id="getdelivery"
                       class="cursor-pointer opacity-50 hover:opacity-100  h4 border-transparent text-purple   inline-flex items-center px-1 pt-1 border-b-2 text-xl font-medium"
                       x-state-description="undefined: &quot;border-indigo-500 text-gray-900&quot;, undefined: &quot;border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700&quot;">
                    Get Delivery
                    </a>




                </div>


                <div class="input-container flex items-center border-b border-purple mb-6 ">
                    <input type="hidden" name="g" value="TTLjbb">
                    <input type="text" autocomplete="email" name="email" id="pac-input" placeholder="Search By Address" class="mt-2 w-full p-4  text-center mx-auto text-purple bg-transparent h4 uppercase mb-5 has-underline flex-auto uppercase bg-transparent text-teal" required="" data-js-newsletter-form-input="">
                    <button type="submit" data-js-newsletter-form-submit="">
                        <svg width="26" height="16" viewBox="0 0 26 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path opacity="0.25" d="M1 7C0.447715 7 0 7.44772 0 8C0 8.55228 0.447715 9 1 9L1 7ZM25.7071 8.70711C26.0976 8.31658 26.0976 7.68342 25.7071 7.29289L19.3431 0.928932C18.9526 0.538408 18.3195 0.538408 17.9289 0.928932C17.5384 1.31946 17.5384 1.95262 17.9289 2.34315L23.5858 8L17.9289 13.6569C17.5384 14.0474 17.5384 14.6805 17.9289 15.0711C18.3195 15.4616 18.9526 15.4616 19.3431 15.0711L25.7071 8.70711ZM1 9L25 9V7L1 7L1 9Z" fill="#09A0BE"></path>
                        </svg>
                    </button>
                </div>




                <div id="resultsarea" class=" text-lg font-medium text-purple font-gotham hidden">Showing <span id="resultscount"></span> Results | <a class="cursor-pointer" id="clear">Clear</a></div>



                <div id="map" class="mt-6"></div>
                <div id="infowindow-content">
                    <span id="place-name" class="title"></span><br/>
                    <span id="place-address"></span>
                </div>


                <div id="dataresults" class="mt-6 grid grid-cols-1 lg:grid-cols-3 gap-4 w-full  mx-auto   lg:mb-24 mb-16 has-underline">


            </div>


            </div>

        </div>
    </div>
</div>

{#<script>

    const getdelivery = document.getElementById("getdelivery")
    const getpickup = document.getElementById("getpickup")
    const map = document.getElementById("map");
    const resultsarea = document.getElementById("resultsarea");
    const resultscount = document.getElementById("resultscount");
    const clear = document.getElementById("clear");

    clear.addEventListener("click", clearScreen);

    getpickup.addEventListener("click", () => {
        document.getElementById("type").value = 2;

        map.classList.remove("inactivemap");
        getpickup.classList.add("opacity-100");
        getdelivery.classList.remove("opacity-100");
        getdelivery.classList.add("opacity-50");
        document.getElementById("pac-input").value = '';
        document.getElementById("dataresults").innerHTML = '';
        document.getElementById('resultsarea').classList.add("hidden");
        document.getElementById('resultscount').innerHTML = 0;
        return false;
    });

    getdelivery.addEventListener("click", () => {
        document.getElementById("type").value = 1;
        document.getElementById("pac-input").value = '';
        document.getElementById("dataresults").innerHTML = '';
        document.getElementById('resultsarea').classList.add("hidden");
        document.getElementById('resultscount').innerHTML = 0;

        map.classList.add("inactivemap");
        getpickup.classList.add("opacity-50");
        getpickup.classList.remove("opacity-100");
        getdelivery.classList.add("opacity-100");

        return false;
    });


    function clearScreen() {
        document.getElementById("dataresults").innerHTML = '';
        document.getElementById('resultsarea').classList.add("hidden");
        document.getElementById('resultscount').innerHTML = 0;
        document.getElementById("pac-input").value = '';



    }

    function clickOutsideElement(element, callback) {
        const stopPropagation = (event) => {
            event.stopPropagation()
        }

        const handleClickOutside = () => {
            document.removeEventListener("click", handleClickOutside)
            element.removeEventListener("click", stopPropagation)
            callback()
        }

        document.addEventListener("click", handleClickOutside)
        element.addEventListener("click", stopPropagation)
    }

    function initMap() {
        const map = new google.maps.Map(document.getElementById("map"), {
            {% if post.link ends with 'find-a-cann-ca/' %}
                center: {lat: 43.825681, lng: -79.395},
            {% else %}
                center: {lat: 40.749933, lng: -73.98633},
            {% endif %}
            zoom: 4,
            mapTypeControl: false,
            styles: [
                {
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#f5f5f5"
                        }
                    ]
                },
                {
                    "elementType": "labels.icon",
                    "stylers": [
                        {
                            "visibility": "off"
                        }
                    ]
                },
                {
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#616161"
                        }
                    ]
                },
                {
                    "elementType": "labels.text.stroke",
                    "stylers": [
                        {
                            "color": "#f5f5f5"
                        }
                    ]
                },
                {
                    "featureType": "administrative.land_parcel",
                    "elementType": "labels",
                    "stylers": [
                        {
                            "visibility": "off"
                        }
                    ]
                },
                {
                    "featureType": "administrative.land_parcel",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#bdbdbd"
                        }
                    ]
                },
                {
                    "featureType": "poi",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#eeeeee"
                        }
                    ]
                },
                {
                    "featureType": "poi",
                    "elementType": "labels.text",
                    "stylers": [
                        {
                            "visibility": "off"
                        }
                    ]
                },
                {
                    "featureType": "poi",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#757575"
                        }
                    ]
                },
                {
                    "featureType": "poi.business",
                    "stylers": [
                        {
                            "visibility": "off"
                        }
                    ]
                },
                {
                    "featureType": "poi.park",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#e5e5e5"
                        }
                    ]
                },
                {
                    "featureType": "poi.park",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#9e9e9e"
                        }
                    ]
                },
                {
                    "featureType": "road",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#ffffff"
                        }
                    ]
                },
                {
                    "featureType": "road",
                    "elementType": "labels.icon",
                    "stylers": [
                        {
                            "visibility": "off"
                        }
                    ]
                },
                {
                    "featureType": "road.arterial",
                    "stylers": [
                        {
                            "visibility": "off"
                        }
                    ]
                },
                {
                    "featureType": "road.arterial",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#757575"
                        }
                    ]
                },
                {
                    "featureType": "road.highway",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#dadada"
                        }
                    ]
                },
                {
                    "featureType": "road.highway",
                    "elementType": "labels",
                    "stylers": [
                        {
                            "visibility": "off"
                        }
                    ]
                },
                {
                    "featureType": "road.highway",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#616161"
                        }
                    ]
                },
                {
                    "featureType": "road.local",
                    "stylers": [
                        {
                            "visibility": "off"
                        }
                    ]
                },
                {
                    "featureType": "road.local",
                    "elementType": "labels",
                    "stylers": [
                        {
                            "visibility": "off"
                        }
                    ]
                },
                {
                    "featureType": "road.local",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#9e9e9e"
                        }
                    ]
                },
                {
                    "featureType": "transit",
                    "stylers": [
                        {
                            "visibility": "off"
                        }
                    ]
                },
                {
                    "featureType": "transit.line",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#e5e5e5"
                        }
                    ]
                },
                {
                    "featureType": "transit.station",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#eeeeee"
                        }
                    ]
                },
                {
                    "featureType": "water",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "color": "#c9c9c9"
                        }
                    ]
                },
                {
                    "featureType": "water",
                    "elementType": "labels.text.fill",
                    "stylers": [
                        {
                            "color": "#9e9e9e"
                        }
                    ]
                }
            ],

        });
        const input = document.getElementById("pac-input");
        const options = {
            fields: ["formatted_address", "geometry", "name"],
            strictBounds: false,
            types: ["address"],
        };

        const autocomplete = new google.maps.places.Autocomplete(input, options);
        autocomplete.bindTo("bounds", map);

        const infowindow = new google.maps.InfoWindow();
        const infowindowContent = document.getElementById("infowindow-content");
        infowindow.setContent(infowindowContent);

        const marker = new google.maps.Marker({
            map,
            anchorPoint: new google.maps.Point(0, -29),
        });

        autocomplete.addListener("place_changed", () => {

            infowindow.close();
            marker.setVisible(false);

            const place = autocomplete.getPlace();

            if (!place.geometry || !place.geometry.location) {
             //   window.alert("No details available for input: '" + place.name + "'");
                return;
            }

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport, 240);
                var lat = place.geometry.location.lat();
                var lng = place.geometry.location.lng();


                var xhttp = new XMLHttpRequest();

                xhttp.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                       document.getElementById('dataresults').innerHTML = this.responseText;
                    }
                };
                var type =   document.getElementById("type").value;
                xhttp.open("POST", "/wp-admin/admin-ajax.php", true);
                xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xhttp.send("action=get_location_cards&lat=" + lat + "&lng=" + lng+"&type="+type);

                var xhttplocations = new XMLHttpRequest();

                var pinColor = "#5E609D";
                var pinLabel = "A";
                var pinSVGHole = "M12,11.5A2.5,2.5 0 0,1 9.5,9A2.5,2.5 0 0,1 12,6.5A2.5,2.5 0 0,1 14.5,9A2.5,2.5 0 0,1 12,11.5M12,2A7,7 0 0,0 5,9C5,14.25 12,22 12,22C12,22 19,14.25 19,9A7,7 0 0,0 12,2Z";
                var labelOriginHole = new google.maps.Point(12,15);
                var pinSVGFilled = "M 12,2 C 8.1340068,2 5,5.1340068 5,9 c 0,5.25 7,13 7,13 0,0 7,-7.75 7,-13 0,-3.8659932 -3.134007,-7 -7,-7 z";
                var labelOriginFilled =  new google.maps.Point(12,9);


                var markerImage = {
                    path: pinSVGFilled,
                    anchor: new google.maps.Point(12,17),
                    fillOpacity: 1,
                    fillColor: pinColor,
                    strokeWeight: 2,
                    strokeColor: "#5E609D",
                    scale: 2,
                    labelOrigin: labelOriginFilled
                };

                xhttplocations.onreadystatechange = function () {

                    if (this.readyState == 4 && this.status == 200) {

                        if(this.responseText =='0') {

                            document.body.classList.add('gate--open');
                            const modal = document.querySelector("[data-js-unavailable-modal]");
                            const modalZipCode = document.querySelector("[data-js-zip-code-modal]");
                            if (modal) {
                                modal.classList.add('is-open');
                                if (modalZipCode) {
                                    const gateModal = document.querySelector("[data-js-gate-modal]")
                                    if (gateModal) {
                                        gateModal.style.backgroundColor = null
                                    }
                                    modalZipCode.classList.remove('is-open');
                                }
                                clickOutsideElement(modal, () => {
                                    document.body.classList.remove('gate--open');
                                    const unavailbleModal = document.querySelector("[data-js-unavailable-modal]");
                                    if (modal) modal.classList.remove('is-open');
                                })
                            }

                        }

                        const res = JSON.parse(this.responseText);

                        document.getElementById('resultsarea').classList.remove("hidden");
                        document.getElementById('resultscount').innerHTML = res.length;

                        const submarker = [];

                        var count = 0;
                        for (i = 0; i < res.length; i++) {

                            var count = i+1;


                            var myLatlng = new google.maps.LatLng(res[i].lat,res[i].lng);



                            var contentString = ' <div class=" content pt-4 text-center font-inherit"><small class="mt-2 text-xs inline border p-3 border-purple center w-auto border-1 rounded-xl">'+res[i].distance+' MILES</small>';
                            contentString = contentString+ '<h2 class="text-center mt-4  h5 text-purple">'+res[i].title+'</h2>';
                            contentString = contentString+ '<p class="mt-2 mb-2 text-purple text-sm">'+res[i].location_address+'</div>';


                            contentString = contentString+ '</div>';


                            const infowindow = new google.maps.InfoWindow({
                                content: contentString,
                            });

                             const submarker = new google.maps.Marker({
                                position: myLatlng,
                                title: res[i].title,
                                label: {text: ''+count+'', color: "white"},
                                icon: markerImage
                            });
                            submarker.setMap(map);

                            submarker.addListener("click", () => {
                                //alert(i);
                                infowindow.open({
                                    anchor: submarker,
                                    map,
                                    shouldFocus: false,
                                });
                            });

                            console.log(i);
                        }





                    }
                };
                xhttplocations.open("POST", "/wp-admin/admin-ajax.php", true);
                xhttplocations.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xhttplocations.send("action=get_location_markers&lat=" + lat + "&lng=" + lng+"&type="+type);








            } else {

                map.setCenter(place.geometry.location);
                map.setZoom(13);
            }

            //marker.setPosition(place.geometry.location);
           // marker.setVisible(true);
            infowindowContent.children["place-name"].textContent = place.name;
            infowindowContent.children["place-address"].textContent =
                place.formatted_address;
            infowindow.open(map, marker);
        });


    }
</script>#}

<style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */



    #map {
        width: 100%;
        height: 500px;
        overflow: auto;
    }

    .inactivemap {

        width: 0px!important;
        height: 0px!important;
        overflow: hidden!important;


    }

    /* Optional: Makes the sample page fill the window. */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        background-color: #fff;
        border: 0;
        border-radius: 2px;
        box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
        margin: 10px;
        padding: 0 0.5em;
        font: 400 18px Roboto, Arial, sans-serif;
        overflow: hidden;
        font-family: Roboto;
        padding: 0;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

    .pac-controls label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
    }


    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }
</style>

{#<script#}
{#        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBDSdx0rkLPY9I_WOGJHszQXlEnI2gJers&callback=initMap&libraries=places&v=weekly"#}
{#        async#}
{#></script>#}
